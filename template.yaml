AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  car camp

  Sam template for car camp app
  

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5

Resources:
  GraphQlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: graph-ql/
      Handler: graph-ql
      Runtime: go1.x
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - S3CrudPolicy:
            BucketName: !Ref ImagesBucket
      Events:
        CatchAll:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref Api
            Path: /graph-ql
            Method: POST
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          DynamoTableName: !Ref DynamoDBTable
          S3BucketName: !Ref ImagesBucket
  
  DataSourceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: data-source/
      Handler: data-source
      Runtime: go1.x
      Tracing: Active # https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
        - S3CrudPolicy:
            BucketName: !Ref DataBucket
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          DynamoTableName: !Ref DynamoDBTable
          S3DataBucketName: !Ref DataBucket
  
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1
          AttributeType: S
        - AttributeName: GSI2
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST # for now
      GlobalSecondaryIndexes:
        - IndexName: "GSI1"
          KeySchema:
            - AttributeName: GSI1
              KeyType: HASH
            - AttributeName: SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: "GSI2"
          KeySchema:
            - AttributeName: GSI2
              KeyType: HASH
            - AttributeName: SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors: 
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        ApiKeyRequired: True
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: '/*' # allows for logging on any resource
          HttpMethod: '*' # allows for logging on any method


  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      UserPoolName: CarCampUsers
      AccountRecoverySetting:
        RecoveryMechanisms: 
          - Name: "verified_email"
            Priority: 1
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: false
        DeviceOnlyRememberedOnUserPrompt: false
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK
  
  
  UserGroupAdmin:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: "Group for company admins, have access to admin dashboard."
      GroupName: "Admin"
      Precedence: 5 # Set to 5 in case need to go lower
      UserPoolId: !Ref UserPool

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: Default
      GenerateSecret: false
      RefreshTokenValidity: 30
      UserPoolId: !Ref UserPool
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - http://localhost:8080/
        - http://localhost:8080/login/oauth2/code/cognito
      LogoutURLs:
        - http://localhost:8080/
      SupportedIdentityProviders:
        - COGNITO

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: "carcamp"
      UserPoolId: !Ref UserPool

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName:
            Fn::GetAtt: [UserPool, ProviderName]
      IdentityPoolName: "CarCampIdentityPool"

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: CarCampWeb
      Enabled: 'true'
      StageKeys:
        - RestApiId: !Ref Api
          StageName: dev
  
  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref Api
          Stage: dev
      Description: "carcamp usage plan"
      UsagePlanName: CarCampUsagePlan

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  ImagesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: carcamp-images
  
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: carcamp-frontend

  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: carcamp-data


Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  GraphQlApi:
    Description: "API Gateway endpoint URL for Prod environment for First Function"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/dev/graph-ql/"
  GraphQlFunction:
    Description: "First Lambda Function ARN"
    Value: !GetAtt GraphQlFunction.Arn
  GraphQlFunctionRole:
    Description: "Implicit IAM Role created for Graph ql function"
    Value: !GetAtt GraphQlFunctionRole.Arn
  DynamoDBTable:
    Description: "Dynamodb table to store information"
    Value: !Ref DynamoDBTable
  FrontendBucket:
    Description: "S3 bucket hosting the frontend app"
    Value: !GetAtt FrontendBucket.WebsiteURL
  
