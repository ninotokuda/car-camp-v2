// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schema.graphql

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataSchemagraphql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4f\x8f\xd3\x3e\x10\xbd\xfb\x53\x4c\xf5\xbb\xb4\x52\x3f\x41\x6e" +
	"\x3f\xa8\x58\x2a\xd1\xd5\xb2\x6d\x4f\xa8\x07\x2b\x19\x52\x8b\xc4\x0e\xf6\x04\x14\xa1\xfd\xee\xc8\xe3\x38\xb1\xb3" +
	"\x5d\x0a\x97\xba\x7e\x9e\x3f\xcf\x6f\x9e\xe3\xca\x2b\xb6\x12\x7e\x09\x80\xef\x3d\xda\xa1\x80\xcf\x7e\x11\x00\x6d" +
	"\x4f\x92\x94\xd1\x05\x1c\xc6\x7f\xe2\x45\x08\x1a\x3a\x0c\x21\x9c\xe3\x3a\x43\x6b\xff\xb3\xaf\x0a\x38\x92\x55\xba" +
	"\x5e\x6d\x0a\x38\x76\x86\x56\xe3\xb1\x7b\x37\x3c\xa0\xb9\x4a\x77\x5d\xd7\x61\x9d\x22\xb7\x1c\x70\x1a\x3a\x74\x05" +
	"\x7c\x09\xe0\x65\xe3\xff\x76\x86\x2e\xbe\xc0\x31\x14\x78\x6f\x51\x92\xb1\xeb\x32\xac\x49\xb3\xfb\x25\x2c\xfe\x50" +
	"\xf8\xd3\x2d\x58\x6e\xa1\x77\x68\xd3\x7d\x23\x1d\x3d\x73\xec\x8c\xfa\x42\x01\xe3\x52\x3e\x65\x9d\xe7\xf9\xdb\x9e" +
	"\x1d\xda\xd5\x24\x4e\x54\x8b\xf5\xf9\x0f\x98\x32\x7a\x36\x91\xfd\x79\xd1\xb8\x36\x98\xaa\x32\xdf\x28\xe5\x46\x8a" +
	"\xfa\x0a\x0b\xf8\xd0\x18\x49\x5b\x68\x8c\xae\x73\x44\xcb\x36\x49\x90\x55\x65\xd1\xb9\x19\x28\x4d\x95\x1c\x77\x16" +
	"\xbf\x62\x49\xbd\x4d\xb0\x52\xd1\x30\xef\xae\xa6\xc5\x27\x59\xe3\xd9\x36\x89\xb0\x5b\x20\x59\xe7\x42\xc7\x51\x87" +
	"\x7b\x06\xb1\x96\x8e\x78\x2d\x76\x8b\xce\xc9\x3a\xe9\x6e\x25\x29\x5d\x17\xb0\xd7\xb4\x29\x20\x94\x59\x2d\x04\xdc" +
	"\xb7\xb2\xc6\xfb\xb5\x55\x9b\x54\x1e\x19\x72\xea\x3c\x23\x0f\xf1\x7c\x8e\x79\x31\x01\xf0\xb0\xf0\xe8\x18\x94\xce" +
	"\xc3\x63\x9f\xf2\x89\x30\xb4\x98\x89\xc7\xd8\xb8\xca\xe8\x93\x6a\xb3\xf4\x70\x41\x37\xdb\x6b\x6c\xb3\x53\x8e\xa4" +
	"\x2e\x83\x99\x93\xbd\x3f\xe7\x3b\xc4\x03\xde\x5c\x62\x87\xf4\x49\xcc\x58\x70\xa6\x00\x78\x4c\xbc\x21\x00\x76\xe8" +
	"\x4a\xab\xba\xf0\xb8\x27\xf4\xff\xdc\x32\xbe\x4c\xe2\x19\x01\xf0\xf4\xca\x34\x3e\x26\x71\x8d\x00\xf8\x78\xd3\x36" +
	"\x02\xe0\x94\xf9\x66\x1a\x44\xb8\x3d\x8f\x62\xf9\xf6\x56\x37\xc7\xf3\x96\xa0\xf9\xa3\x1a\x81\x49\x80\xe7\xd9\x5d" +
	"\x02\xe0\x90\x9b\x2f\x73\x45\x14\xfc\x0d\x77\xec\xd0\x91\xd2\xcc\xe0\xef\xb9\xc5\x9a\x07\x24\xb4\x2e\xb2\x88\xe8" +
	"\x11\x4b\xa3\xab\x11\x4e\xa9\xf0\x88\x67\x1e\x7e\x77\x4f\x1d\x0e\x3a\xdb\xe6\x8f\xca\xdc\xa2\x39\x35\xf6\xd1\xdc" +
	"\x33\x4f\xf3\x85\x1e\x55\xf9\x4d\xe7\x4e\xfa\x17\x7b\x73\x2c\x56\xfc\x45\x8f\xdf\x67\xf1\x22\x7e\x07\x00\x00\xff" +
	"\xff\xb9\x69\xee\x5c\x81\x06\x00\x00")

func bindataSchemagraphqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSchemagraphql,
		"schema.graphql",
	)
}



func bindataSchemagraphql() (*asset, error) {
	bytes, err := bindataSchemagraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "schema.graphql",
		size: 1665,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1606397483, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": bindataSchemagraphql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"schema.graphql": {Func: bindataSchemagraphql, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
