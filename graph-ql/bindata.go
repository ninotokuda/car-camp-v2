// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schema.graphql

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataSchemagraphql = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x8f\xda\x30\x10\xbd\xfb\x57\x0c\xea\x05\x24\x7e\x41\x6e\x6d" +
	"\x51\xb7\x48\xa5\xda\x2e\x70\xaa\x38\x58\xc9\x6c\xb0\x9a\xd8\xa9\x3d\x69\x85\xaa\xfd\xef\x95\xed\x04\x8f\x43\x10" +
	"\xed\x85\xc4\xcf\xf3\xe5\xf7\x9e\x89\x2b\xcf\xd8\x4a\xf8\x23\x00\x7e\xf6\x68\x2f\x05\x7c\xf3\x0f\x01\xd0\xf6\x24" +
	"\x49\x19\x5d\xc0\x6e\x78\x13\x6f\x42\xd0\xa5\xc3\x18\x12\x72\x5c\x67\x68\xe9\x7f\xb6\x55\x01\x7b\xb2\x4a\xd7\x8b" +
	"\x55\x01\xfb\xce\xd0\x62\xd8\x76\x1f\x2e\x4f\x68\xce\xd2\x9d\x97\x75\x7c\x5e\x23\xd7\x21\xe0\x70\xe9\xd0\x15\xf0" +
	"\x3d\x82\xa7\x95\x7f\xed\x0c\x9d\x7c\x81\x7d\x2c\xf0\xd1\xa2\x24\x63\x97\x65\x7c\xb2\x66\x8f\x4b\x58\xfc\xa5\xf0" +
	"\xb7\x9b\x4c\xb9\x86\xde\xa1\xe5\xeb\x46\x3a\x7a\x09\xb1\x09\xf5\x85\x22\x16\x4a\xf9\x94\x65\x9e\xe7\x4f\x7b\x74" +
	"\x68\x17\x57\x72\x46\xb6\x02\x3f\x61\x60\xf4\xb3\x8c\xb3\x1f\xf3\xf4\x35\xd4\x06\xef\x90\xc2\xa0\x46\x92\xa2\xbe" +
	"\xc2\x02\x3e\x35\x46\x92\x47\x8c\xae\x27\x90\x96\x2d\xa6\xf3\xc8\xaa\xb2\xe8\x5c\x02\x4a\x53\xb1\xed\xce\xe2\x2b" +
	"\x96\xd4\x5b\x86\x95\x8a\x2e\x69\x75\x36\x2d\x3e\xcb\x1a\x8f\xb6\x49\xdc\x2e\x4e\x6b\x20\x59\x73\x80\xe9\x1d\x8f" +
	"\x1b\x19\x9b\xda\xe2\x96\xf1\x16\x9d\x93\x35\xeb\x6f\x25\x29\x5d\x17\xb0\xd5\xb4\x2a\x20\x96\xf1\x65\xdf\x31\x1e" +
	"\xb7\xad\xac\xf1\x71\x6d\xd5\xb2\xca\xc3\x84\x21\x35\x09\xe5\xa1\x20\xd2\x3e\x2f\x26\x00\x9e\x26\x46\x1d\x82\x32" +
	"\x51\x04\xc0\x97\x89\x2a\x1e\x9a\xca\x22\x00\x82\x7b\x95\xd1\x07\xd5\x66\xe9\xf1\x80\x2e\x79\x6c\x68\xb3\x51\x8e" +
	"\xa4\x2e\xa3\xa3\xd9\xda\xef\x87\x33\x8c\x1b\x61\x71\x1a\x3b\xf0\x7b\x91\xb0\x68\x4f\x01\xf0\x95\xb9\x43\x00\x6c" +
	"\xd0\x95\x56\x75\xf1\x86\x5f\xd1\xf7\xb9\x69\x7c\x19\xe6\x1a\x01\xf0\x7c\x63\x1b\x1f\xc3\x7c\x23\x00\x3e\xcf\x1b" +
	"\x47\x00\x1c\x72\xe7\x84\x31\x5e\x65\xdf\xc4\x93\x1c\x6d\x73\xad\x32\x8a\x14\x99\x09\x32\x4d\x2f\xe7\x62\x56\xba" +
	"\x7b\x64\xe7\xf7\x6e\x00\xae\xe4\xbc\x24\xe7\x09\x80\x5d\x6e\xcc\xcc\x31\xa3\x18\x77\x9c\xb3\x41\x47\x4a\x87\x09" +
	"\xfe\x7d\xb6\xb1\xe6\x0e\x09\xad\x1b\x9c\xc3\xf0\x3d\x96\x46\x57\x7c\x23\x75\xb9\x95\x95\xf7\xe7\x8e\xcd\x77\x6f" +
	"\x18\xcf\x76\xe7\xdc\xc1\x59\x08\xd9\x89\x02\xbf\x7a\x24\xcc\xb4\xe1\xac\x28\xf3\x0c\x8d\x9d\x7d\x78\x68\x3a\xf9" +
	"\x13\xf5\xee\x56\xe5\x0f\x9d\x53\xf1\x3f\xd7\x2e\xc4\x62\x15\x3e\x37\xe3\xc7\x43\xbc\x89\xbf\x01\x00\x00\xff\xff" +
	"\x68\xb8\x71\x92\x1e\x07\x00\x00")

func bindataSchemagraphqlBytes() ([]byte, error) {
	return bindataRead(
		_bindataSchemagraphql,
		"schema.graphql",
	)
}



func bindataSchemagraphql() (*asset, error) {
	bytes, err := bindataSchemagraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "schema.graphql",
		size: 1822,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1617459197, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": bindataSchemagraphql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"schema.graphql": {Func: bindataSchemagraphql, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
