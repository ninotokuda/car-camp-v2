schema {
  query: Query
  mutation: Mutation
}

type Query {
  spot(spotId: String!): Spot!
  spotsByGeohash(geohash: String!, spotTypes: [String]): [Spot]!
  SpotsByCreator(creatorId: String!, spotTypes: [String]): [Spot]!
  reviews(spotId: String, userId: String, lastReviewId: String): [Review]!
  user(userId: String!): User!
}

type Mutation {
  # createSpot(creatorUserId: String, goehash: String, spotType: String, latitude: Float, longitude: Float, name: String, address: String, code: String, prefecture: String, city: String, homePageUrls: [String], tags: [String]): Spot!
  createReview(spotId: String!, userId: String, message: String, rating: Int): Review!
  # createSpotImage(spotId: String!, userId: String, image: String): SpotImage!
}

type Spot {
  SpotId: String!
  Geohash: String!
  SpotType: String!
  Latitude: Float!
  Longitude: Float!
  CreationTime: String!
  Reviews: [Review]
  SpotDistances: [SpotDistance]
  Images: [SpotImage]
  CreatorId: String
  Creator: User
  Name: String
  Description: String
  Address: String
  Code: String
  Prefecture: String
  City: String
  HomePageUrls: [String]
  Tags: [String]
}

type Review {
  ReviewId: String!
  SpotId: String!
  CreationTime: String!
  UserId: String
  User: User
  Rating: Int
  Message: String
}

type SpotDistance {
  SpotId: String!
  DestinationSpotId: String!
  CreationTime: String!
  DistanceMeters: Int
  DistanceSeconds: Int
}

type SpotImage {
  SpotImageId: String!
  SpotId: String!
  ImageUrl: String!
  UserId: String
  CreationTime: String!
}

type User {
  UserId: String!
  Nickname: String
  CreationTime: String!
  Reviews: [Review]
  CreatedSpots: [Spot]
}
